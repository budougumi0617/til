// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package http

import (
	stdhttp "net/http"
	"sync"
)

// Ensure, that RoundTripperMock does implement RoundTripper.
// If this is not the case, regenerate this file with moq.
var _ RoundTripper = &RoundTripperMock{}

// RoundTripperMock is a mock implementation of RoundTripper.
//
//	func TestSomethingThatUsesRoundTripper(t *testing.T) {
//
//		// make and configure a mocked RoundTripper
//		mockedRoundTripper := &RoundTripperMock{
//			RoundTripFunc: func(request *stdhttp.Request) (*stdhttp.Response, error) {
//				panic("mock out the RoundTrip method")
//			},
//		}
//
//		// use mockedRoundTripper in code that requires RoundTripper
//		// and then make assertions.
//
//	}
type RoundTripperMock struct {
	// RoundTripFunc mocks the RoundTrip method.
	RoundTripFunc func(request *stdhttp.Request) (*stdhttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// RoundTrip holds details about calls to the RoundTrip method.
		RoundTrip []struct {
			// Request is the request argument value.
			Request *stdhttp.Request
		}
	}
	lockRoundTrip sync.RWMutex
}

// RoundTrip calls RoundTripFunc.
func (mock *RoundTripperMock) RoundTrip(request *stdhttp.Request) (*stdhttp.Response, error) {
	if mock.RoundTripFunc == nil {
		panic("RoundTripperMock.RoundTripFunc: method is nil but RoundTripper.RoundTrip was just called")
	}
	callInfo := struct {
		Request *stdhttp.Request
	}{
		Request: request,
	}
	mock.lockRoundTrip.Lock()
	mock.calls.RoundTrip = append(mock.calls.RoundTrip, callInfo)
	mock.lockRoundTrip.Unlock()
	return mock.RoundTripFunc(request)
}

// RoundTripCalls gets all the calls that were made to RoundTrip.
// Check the length with:
//
//	len(mockedRoundTripper.RoundTripCalls())
func (mock *RoundTripperMock) RoundTripCalls() []struct {
	Request *stdhttp.Request
} {
	var calls []struct {
		Request *stdhttp.Request
	}
	mock.lockRoundTrip.RLock()
	calls = mock.calls.RoundTrip
	mock.lockRoundTrip.RUnlock()
	return calls
}
